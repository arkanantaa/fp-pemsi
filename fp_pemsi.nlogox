globals [
  team-list                ; List of active team colors
  environmental-modifier   ; Weather effect multiplier (0.5-1.0)
  weather                  ; Weather slider value (0..1)
  leader-boost-radius      ; Normalized 0..1 (effective radius 2..10)
  maximal-confidence       ; Fixed upper cap for confidence (set in setup)
  maximal-manipulation     ; Fixed upper cap for manipulation (set in setup)
  distinct-team-palette    ; Fixed palette for distinct team colors
  total-teams-reached-3    ; Lifetime count of teams that ever had >=3 members
  counted-teams-3          ; List of team colors already counted towards >=3
  ]

breed [leaders leader]
breed [followers follower]

; Variables for both leaders and followers
turtles-own [
  team-id                   ; Color representing team affiliation
  confidence                ; Strength of belief in team (0-100)
  initial-confidence        ; The agent's initial confidence at creation
  manipulation              ; Ability to influence others (0-100)
  speed                     ; Movement speed per tick
  interaction-radius        ; Distance for interaction with others
  persuasions-this-tick     ; Count of successful persuasions credited this tick
  disband-timer             ; Timer for disbandment
]

to setup
  clear-all
  set-default-shape turtles "person"

  ; Initialize global variables
  set team-list []
  set environmental-modifier 1.0
  ; Set fixed maxima (replaces sliders)
  set maximal-confidence 100
  set maximal-manipulation 100
  set total-teams-reached-3 0
  set counted-teams-3 []
  ; Initialize a high-contrast palette (NetLogo 0-140 color wheel, spaced hues)
  set distinct-team-palette [15 25 35 45 55 65 75 85 95 105 115 125 135 5  
                             20 30 40 50 60 70 80 90 100 110 120 130 10 0]

  ; Create the entire population as followers with no team
  create-people number-of-people

  ; Select and promote the top 3 as leaders
  promote-top-leaders

  ; Update environmental modifier based on weather
  update-environment

  reset-ticks
end

to create-people [num]
  ; Create population of followers with no initial team (use numeric sentinel -1)
  create-followers num [
    setxy random-xcor random-ycor

    ; No team initially: use -1 (numeric) to avoid string color errors
    set team-id -1
    set color white

  ; Assign random attributes (initialized using sliders as minima)
  let conf-range max list 0 (max-confidence - min-confidence)
  set confidence min-confidence + (ifelse-value conf-range > 0 [ random (conf-range + 1) ] [ 0 ])
  set initial-confidence confidence                              ; remember initial value
  let manip-range max list 0 (max-manipulation - min-manipulation)
  set manipulation min-manipulation + (ifelse-value manip-range > 0 [ random (manip-range + 1) ] [ 0 ])
    set speed 0.1 + random-float 0.4 ; 0.1-0.5
    set interaction-radius 2 + random 3 ; 2-4

    ; Set size based on confidence
    set size 0.5 + (confidence / 200)
    set disband-timer 0
  ]
end

to promote-top-leaders
  ; Generate colors dynamically based on initial-teams slider
  let color-options [15 105 55 25 85 45 135 125] ; Pool of distinct colors
  let initial-colors []
  repeat initial-teams [
    set initial-colors lput (item (length initial-colors) color-options) initial-colors
  ]

  ; Find the top followers based on slider value
  let potential-leaders max-n-of initial-teams followers [confidence + manipulation]

  ; Promote them to leaders and assign teams
  let i 0
  ask potential-leaders [
    let new-team-color item i initial-colors

    ; Change breed to leader
    set breed leaders

    ; Assign team
    set team-id new-team-color
  apply-team-color true
    set team-list lput new-team-color team-list

    set interaction-radius interaction-radius + 2
    set size size + 0.3

    set i i + 1
    set disband-timer 0
  ]
end

to go
  ; Update environment based on weather
  update-environment

  ; Reset per-tick persuasion counters
  reset-persuasion-flags

  ; Movement phase
  ask turtles [
    move-agent
  ]

  ; Leader actions
  ask leaders [
    boost-confidence
  ]

  ; Follower actions
  ask followers [
    evaluate-surroundings
    attempt-to-create-new-team
  ]

  ; Apply persuasion failure penalties
  apply-persuasion-failure-penalties

  ; Ensure each team has the highest-confidence turtle as leader
  reassign-leaders

  ; Update lifetime counter for teams that have ever reached >=3 members
  update-teams-reached-3

  ; Disband weak teams (leader confidence <= 50)
  disband-weak-teams

  ; Update visuals
  update-team-plots

  ; Stop at 2000 ticks
  if ticks >= 3000 [
    stop
  ]

  tick
end

to update-environment
  ;; Weather scale 0..1 step 0.25
  ;; 0.00 = Ideal (x1.0)
  ;; 0.25 = Difficult Lv1 (x0.8)
  ;; 0.50 = Difficult Lv2 (x0.6)
  ;; 0.75 = Difficult Lv3 (x0.4)
  ;; 1.00 = Maximum Difficulty (x0.2)
  if weather <= 0 [ set environmental-modifier 1.0 ]
  if weather > 0 and weather <= 0.25 [ set environmental-modifier 0.8 ]
  if weather > 0.25 and weather <= 0.5 [ set environmental-modifier 0.6 ]
  if weather > 0.5 and weather <= 0.75 [ set environmental-modifier 0.4 ]
  if weather > 0.75 [ set environmental-modifier 0.2 ]
end

to move-agent
  ; Random movement based on speed
  right random 60 - 30
  forward speed
  ; Keep agents inside visible world by bouncing at edges
  bounce-at-edges
end

; LEADER PROCEDURES
to boost-confidence
  ; Leaders boost confidence of same-team followers within effective radius
  let my-team team-id
  ; Interpret leader-boost-radius as normalized [0..1], map to [2..10]
  let effective-radius 2 + (8 * leader-boost-radius)
  if effective-radius < 2 [ set effective-radius 2 ]
  if effective-radius > 10 [ set effective-radius 10 ]
  let nearby-followers followers in-radius effective-radius with [team-id = my-team]

  ask nearby-followers [
  set confidence min list maximal-confidence (confidence + 2)
    ; Update size based on new confidence
    set size 0.5 + (confidence / 200)
  ]
end

; FOLLOWER PROCEDURES
to evaluate-surroundings
  ; Calculate influence scores for each team in interaction radius
  let my-team team-id
  let my-score calculate-team-influence-score my-team

  ; Find all different teams in the area
  let nearby-agents other turtles in-radius interaction-radius
  ; Collect nearby teams excluding unassigned (-1)
  let nearby-teams remove -1 remove-duplicates [team-id] of nearby-agents

  ; Calculate scores for other teams
  let best-opponent-team my-team
  let best-opponent-score my-score

  foreach nearby-teams [ opponent-team ->
    if opponent-team != my-team [
      let opponent-score calculate-team-influence-score opponent-team
      if opponent-score > best-opponent-score [
        set best-opponent-team opponent-team
        set best-opponent-score opponent-score
      ]
    ]
  ]

  ; Check if should switch teams
  if best-opponent-score > my-score [
    let switch-probability ((best-opponent-score - my-score) / best-opponent-score) * environmental-modifier

    if random-float 1 < switch-probability [
      ; Switch to the more influential team
      set team-id best-opponent-team
      ; Apply team color consistently
      apply-team-color false

      ; Reset confidence to the agent's initial value (capped by maximal-confidence)
      set confidence min list maximal-confidence initial-confidence
      set size 0.5 + (confidence / 200)

      ; Credit persuasion to one member (prefer a leader) of the destination team nearby
      let candidate-persuaders turtles in-radius interaction-radius with [team-id = best-opponent-team and self != myself]
      if any? candidate-persuaders [
        let candidate-leaders leaders with [team-id = best-opponent-team] in-radius interaction-radius
        let persuader (ifelse-value any? candidate-leaders [ one-of candidate-leaders ] [ one-of candidate-persuaders ])
        ask persuader [
          set persuasions-this-tick persuasions-this-tick + 1
          set confidence min list maximal-confidence (confidence + 0.2)
          set manipulation min list maximal-manipulation (manipulation + 2)  ; Scaled up for 0-100 range
          set size 0.5 + (confidence / 200)
        ]
      ]
    ]
  ]
end

to-report calculate-team-influence-score [team-col]
  ; Calculate total influence score for a specific team in interaction radius
  let team-agents other turtles in-radius interaction-radius with [team-id = team-col]
  let total-score 0

  ask team-agents [
    set total-score total-score + (confidence * manipulation)
  ]

  report total-score
end

; --- PERSUASION SUPPORT PROCEDURES ---
to reset-persuasion-flags
  ask turtles [ set persuasions-this-tick 0 ]
end

to apply-persuasion-failure-penalties
  ; Any agent with a team who persuaded no one this tick loses 0.2 confidence
  ask turtles with [team-id != -1 and persuasions-this-tick = 0] [
    set confidence max list 0 (confidence - 0.2)
    set size 0.5 + (confidence / 200)
  ]
end

; --- LEADER MANAGEMENT ---
to reassign-leaders
  foreach team-list [ tcol ->
    let members turtles with [team-id = tcol]
    if any? members [
      let new-leader max-one-of members [confidence]
      ; Promote highest-confidence turtle
      ask new-leader [
        set breed leaders
        apply-team-color true
      ]
      ; Demote all other members to followers
      ask (members with [self != new-leader]) [
        set breed followers
        apply-team-color false
      ]
    ]
  ]
end

to disband-weak-teams
  let teams-to-disband []

  ask leaders [
    ; Count followers of this specific leader's team
    let follower-count count followers with [team-id = [team-id] of myself]

    ; If there are no followers, increment the timer
    if follower-count = 0 [
      set disband-timer disband-timer + 1
    ]

    ; If there are followers, reset the timer
    if follower-count > 0 [
      set disband-timer 0
    ]

    ; If the timer reaches 24, mark the team for disbandment
    if disband-timer >= 24 [
      set teams-to-disband lput team-id teams-to-disband
    ]
  ]

  ; Disband the identified teams
  foreach teams-to-disband [ tcol ->
    ask turtles with [team-id = tcol] [
      set team-id -1
      set breed followers
      set color white
    ]
    set team-list remove tcol team-list
  ]
end

to attempt-to-create-new-team
  ;; Probabilistic founding (no hard cutoffs). Requires local diversity (>=2 teams nearby).
  let nearby-agents other turtles in-radius interaction-radius
  let nearby-teams remove -1 remove-duplicates [team-id] of nearby-agents

  if length nearby-teams >= 2 [
    let manipulation-factor manipulation / 100
    let confidence-factor (100 - confidence) / 100
    let final-new-team-chance environmental-modifier * manipulation-factor * confidence-factor * new-team-chance

    if random-float 1 < final-new-team-chance [
      let different-team-neighbors nearby-agents with [team-id != [team-id] of myself]
      if any? different-team-neighbors [
        let mixing-partner one-of different-team-neighbors

        ;; choose distinct color (palette preferred, else distinct pick)
        let new-color (ifelse-value (length team-list < length distinct-team-palette)
                          [ next-available-team-color ]
                          [ pick-distinct-color 10 ])

        if not member? new-color team-list [ set team-list lput new-color team-list ]

        ;; become leader of new team
        set breed leaders
        set team-id new-color
        apply-team-color true

        ;; founder attribute changes (respect caps)
        set confidence min list maximal-confidence initial-confidence
        set manipulation min list maximal-manipulation (manipulation + 20)
        set interaction-radius interaction-radius + 2
        set size size + 0.3
      ]
    ]
  ]
end

to-report mix-colors [color1 color2]
  ; Robust color mixing to produce a distinct, valid NetLogo color
  ; Guard against unassigned color (-1) by using partner's color as base
  let base1 (ifelse-value color1 = -1 [ color2 ] [ color1 ])
  let base2 color2

  ; Compute a midpoint hue with wrap-around on NetLogo's 0-140 color wheel
  let raw-mix ( (base1 + base2) / 2 )
  ; Add a small random offset to avoid duplicates and increase distinction
  let mixed-color raw-mix + (10 + random 20)

  ; Normalize into 0-140 color wheel range
  while [mixed-color < 0] [ set mixed-color mixed-color + 140 ]
  while [mixed-color >= 140] [ set mixed-color mixed-color - 140 ]

  ; Ensure distinct from base and existing teams; perturb until unique
  while [ (abs(mixed-color - base1) < 1) or member? mixed-color team-list ] [
    set mixed-color mixed-color + (5 + random 20)
    while [mixed-color >= 140] [ set mixed-color mixed-color - 140 ]
  ]

  report mixed-color
end

to-report get-team-ids-display
  ;; Simple approach: build team display string with foreach
  let result "Teams: "
  foreach team-list [ t ->
    set result word result (word "[" t "] ")
  ]
  report result
end

to-report get-team-members-display
  ;; Use visual separators since monitors don't support newlines
  let result ""
  foreach team-list [ t ->
    let member-count count turtles with [team-id = t]
    set result word result (word "Team " t ": " member-count "  |  ")
  ]
  report result
end

to-report count-teams-with-min-members [k]
  ;; Count how many ACTIVE teams currently have at least k members
  let n 0
  foreach team-list [ t ->
    if (count turtles with [team-id = t] >= k) [ set n n + 1 ]
  ]
  report n
end

to update-teams-reached-3
  ;; If an active team reaches >=3 members and hasn't been counted before, record it (lifetime, non-decreasing)
  foreach team-list [ t ->
    if (count turtles with [team-id = t] >= 3) and (not member? t counted-teams-3) [
      set counted-teams-3 lput t counted-teams-3
      set total-teams-reached-3 total-teams-reached-3 + 1
    ]
  ]
end

; UTILITY PROCEDURES
to apply-team-color [is-leader]
  ;; Apply a consistent color scheme for teams with optional vivid mode
  if team-id = -1 [ set color white stop ]
  let base team-id
  ifelse is-leader [ set color base + 2 ] [ set color base ]
end

to-report next-available-team-color
  ;; Return first unused color from the fixed palette
  foreach distinct-team-palette [ c ->
    if not member? c team-list [ report c ]
  ]
  ; If palette is somehow fully used, fallback to a distinct pick
  report pick-distinct-color 10
end

to-report pick-distinct-color [min-gap]
  ;; Pick a hue in [0,140) that is at least min-gap away from every color in team-list
  let attempts 0
  let c random 140
  while [ attempts < 200
          and (not empty? team-list)
          and member? true (map [ t -> (min list abs(c - t) (140 - abs(c - t))) < min-gap ] team-list)
        ] [
    set c random 140
    set attempts attempts + 1
  ]
  report c
end

to bounce-at-edges
  ;; Robust bounce: reflect heading, nudge inside, add small random deflection, and step forward to avoid sticking
  let eps 0.5
  if xcor > max-pxcor [
    ; move slightly inside and reflect horizontally
    set xcor max-pxcor - eps
    set heading (180 - heading)
    set heading heading + (random-float 20 - 10)
    forward 0.5
  ]
  if xcor < min-pxcor [
    set xcor min-pxcor + eps
    set heading (180 - heading)
    set heading heading + (random-float 20 - 10)
    forward 0.5
  ]
  if ycor > max-pycor [
    set ycor max-pycor - eps
    set heading (- heading)
    set heading heading + (random-float 20 - 10)
    forward 0.5
  ]
  if ycor < min-pycor [
    set ycor min-pycor + eps
    set heading (- heading)
    set heading heading + (random-float 20 - 10)
    forward 0.5
  ]
end
to update-team-plots
  ; Update team population plot - simplified version
  set-current-plot "Team Population"

  ; Plot total number of teams
  let total-agents count turtles
  plot total-agents
end

to-report team-member-counts
  ;; Returns a list of member counts aligned with team-list
  report map [[t] -> count turtles with [team-id = t]] team-list
end
